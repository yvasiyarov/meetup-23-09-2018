Два очень разных опыта миграции на Golang 
На примере компаний Lazada и Ozon.Travel
23 Sep 2018
Tags: meetup, go, C#, legacy, php

Юрий Васияров
CTO, Ozon.Travel
yvasiyarov@ozon.travel

* Слайды
Для вашего удобства слайды доступны на github
[[https://github.com/yvasiyarov/meetup-23-09-2018][https://github.com/yvasiyarov/meetup-23-09-2018]]

* 2014-2018 Руководил разработкой платформы в Lazada
- изначально написан на PHP
- 4 офиса разработки: Вьетнам, Сингапур, Бангкок, Москва
- Всего Более 650 инженеров, 120 человек - команда платформы
- 4 датацентра, более 2000 серверов
- до 100k RPS на бэкэнды (декабрь 2017)
.image logo_LZDblue.jpg 200 _

* 2018-настоящее время, CTO Ozon.Travel
- изначально написан на C#
- самый популярный OTA в России (Данные Wordstat)
- до 30 000rpm 
.image ozontravel_logo.png 200 _

* Почему именно Golang ?
- выбор субъективный
- выбор правильный (как показал опыт)
: Микросервисы - катализаторы повального увлечения Golang
: Начав писать на Golang тебе не хочется возвращаться на старую платформу
: И так перейдем к задаче. как правило в виде "дано" выступает монолитное приложение. Давайте сравним PHP монолиты и C# монолиты

* С# монолит VS PHP монолит
- C# монолит более структурированный 
- В C# легче отследить связи между компонентами
: Объектно-ориентированная природа языка заставляет людей писать более структурированный приложения, с более понятной архитектурой, с более четким разделением на модули/подсистемы
: конечно никакой язык не может помешать талантливым программистам создать хаос из зависимостей
: но даже в этом плане в C# дела обстоят лучше: 
: Так как C# язык со строгой типизацией - то этот хаос из зависимостей по крайней мере четко виден

* C# монолит VS PHP монолит
- В C# приложениях часто используют проприетарные или MS-defined кодировки/форматы данных ([[Bond][https://microsoft.github.io/bond/why_bond.html]])
- В PHP приложениях чаще используются открытые форматы данных (хотя в семье не без урода, вспомним php sessions)

* C# монолит VS PHP монолит
- В С# приложениях широко используются хранимые процедуры
- В PHP приложениях для хранения данных как правило используют более простые подходы 
: Я заметил что зачастую в C# слой хранимых процедур образует приложение в приложении
: Если к этому добавить тот факт что сами хранимые процедуры в том же MS SQL можно писасть на C#
: То возникают SQL монстры, где C# приложение по сути фронтенд для MS SQL сервера и не более того
: Теперь давайте поговорим о людях. Ведь именно от них зависит успех всего предприятия

# TODO: сладй с картинкой

* C# VS PHP программисты
- Уровень PHP программистов очень разный: встречаются как профессионалы очень высокого уровня так и "ремесленники"
- PHP программисты как правило не страдают снобизмом
.image php_joke.jpeg
: в связи с этим они как правило менее консервативны и более открыты к новым языкам/технологиям

* C# VS PHP программисты
- Уровень C# программистов как правило различается гораздо меньше
: Практически все C# программисты хорошо знают паттерны проектирования, умеют проектировать архитектуру, умеют писать хорошо тестируемый код 
- C# программисты не задумываются над тем как оно работает внутри
: ибо как правило эта информация скрыта. В лучшем случае есть какая-то статья с блок схемой
- C# привыкли что у каждой проблемы есть одно правильное решение(от MS) 
: нужно просто купить подходящий продукт или технологию от MS и проблема будет решена
: Экосистема Golang принципиально другая... много решений предложенных сообществом и каждый выбирает то что ему по душе
 

* Переход с PHP на Golang
[[https://github.com/yvasiyarov/meetup-23-09-2018/blob/master/stachka2017v3.pdf][Стачка 2017: Golang – опыт промышленной разработки]]
.image php_to_golang.png  
: про особенности обучения PHP программистов Golang-у я уже рассказывал в прошлом году, так что не буду повторяться 

* Переход с C# на Golang
.image sharp.jpeg
 
* Придется быть евангелистом Golang
.image lit_nicky.png 500 _
: главная сложность - убедить человека что в правильности того что ты предлагешь
: убедить что технологии не от MS также могут быть весьма интересными
: в общем нужно быть ЕВАНГЕЛИСТОМ 

* Что не очевидно для C# программиста
.code slice.go
 - C# программист(да и не только C#) ожидает что slice - это reference type

* Slice изнутри
.code slice_internals.go
- slice это просто структура
- все структуры это value type (в терминолигии C#)
.image boyarskii.jpg 
 
* Что насчет map[] ?
.code map_internals.go

* map[] - структура ????
.image map_meme.jpg 
: sizeof(hmap) = 28 bytes

* Скорее указатель на структуру
.code map_internals2.go
[[https://golang.org/src/runtime/map.go][https://golang.org/src/runtime/map.go]]
[[https://golang.org/src/runtime/map_fast32.go][https://golang.org/src/runtime/map_fast32.go]] 
[[https://golang.org/src/runtime/map_fast64.go][https://golang.org/src/runtime/map_fast64.go]] 

* Что насчет channel ?
.code channel.go
[[https://golang.org/src/runtime/chan.go][https://golang.org/src/runtime/chan.go]]

* Подключаемся к MS SQL
**[[https://github.com/denisenkom/go-mssqldb]] 
- Написана на Golang
- Но не поддерживает возвращаемые параметры(output params)

**[[https://github.com/minus5/gofreetds]]
-Требует FreeTDS библиотеку
-Падает если входные параметры процедуры имееют тип alias

.image This_is_Fine_Gopher.png 300 _

* gRPC C#
**[[https://github.com/grpc/grpc/tree/master/src/csharp]] 
- как-то работает
- написана явно не C# программистами 

* Что еще напрягает в Golang 
.image golang_error_handling.png

* Чего не хватает в Golang
.image golang_generics.jpg 600 _ 


* Чего не хватает в Golang
- Нет тернарных операторов 
- Нет enum 
.image golang2.jpeg 500 _ 



